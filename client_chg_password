#!/usr/bin/ksh
################################################################################
#
# Reset an existing user's password to a random (or fixed, if so edited)
#    password and email the user the password
#
# Must feed in an imput file (either /etc/passwd style, or just usernames).
#
# User must exist (or is skipped)
# Account is reset too (failed logins)
#
# Written by: Matt Baker mbaker@computeranddata.com
# Version: 2015.10.02.0001
#
################################################################################

LOGDIR=/logs/user-script
LOGFILE=$LOGDIR/user_add_log.$(date +%Y%m%H%m)
MYMAILDOMAIN=jci.com
UNIXADMIN=corp-gi-ecunix

DEBUG=0
#DEBUG=1

################################################################################
# input testing
#
if (( $DEBUG ))
then
	set -x
fi

if [[ $(whoami) != root ]]
then
	echo "ERROR:3:Must be root user"
	exit 3
fi

if [[ -n $1 ]]
then
	INPUTFILE=$1
else
	INPUTFILE=client_add_user.input
fi

if [[ ! -r $INPUTFILE ]]
then
	echo "ERROR:4:Cannot find $INPUTFILE"
	exit 4
else
	if (( ! $(grep -v ^# $INPUTFILE | grep -v ^$ | wc -l) ))
	then
		echo "ERROR:5:No entries in $INPUTFILE"
		exit 5
	fi
fi

if [[ ! -d $LOGDIR ]]
then
	mkdir -p $LOGDIR
fi

if [[ ! -r $LOGFILE ]]
then
	touch $LOGFILE
	chmod 600 $LOGFILE
fi

################################################################################
# functions
#
f_passmail()
{
	if (( DEBUG ))
	then
		set -x
	fi
	#
	# Generate a strong random password.
	#
	############################################
	#
	# a sepecfic password
	#
		#PASSWORD="mytestp1"
	#
	#***OR***
	#
	# A random password
	#
		PASSWORD=""
	#
	#
	############################################

	if [[ -z $PASSWORD ]]
	then
		#
		# more random choices, but you get unwanted chars/numbers (if you care)
		#
		if [[ -n $(which md5sum 2> /dev/null | grep -v ^no) ]]
		then
			PASSWORD=$(date | md5sum | cut -c1-8)

		elif [[ -n $(which openssl 2> /dev/null | grep -v ^no) ]]
		then
			if [[ $(uname) = HP-UX ]]
			then
				PASSWORD=$(date | openssl md5 \
								| cut -c1-8)
			else
				PASSWORD=$(date | openssl md5 \
				 				| awk -F= '{print $2}' \
								| sed -e 's/ //g' \
								| cut -c1-8)
			fi

		elif [[ -n $(which csum 2> /dev/null | grep -v ^no) ]]
		then
			PASSWORD=$(date | csum -h MD5 - | cut -c1-8)
		fi
	fi

	#catch all
	if [[ -z $PASSWORD ]]
	then
			#give the ability to exclude certain chars/number from the list
			set -A char 2 3 4 5 6 7 8 9 A B C D E F G H J K M N P Q R S T U V W X Y Z a b c d e f g h j k m n p q r s t u v w x y z

			while [ ${#PASSWORD} -lt 8 ]
			do
				PASSWORD="$PASSWORD${char[$(($RANDOM%${#char[*]}+1))]}"
			done
	fi

	#
	#set a password that was randomly genterated and mail it to end user.
	#
	echo "ACTION: setting password for $MYUSER"
	echo "User password set as: $MYUSER:$PASSWORD" >> $LOGFILE

	if [[ $(uname) = HP-UX ]]
	then
		if [[ -n $(uname -r | grep 11.31) ]]
		then
			echo "ERROR:10:Won't work on 11.31, only older versions"
			exit 10
		else
			/usr/sam/lbin/usermod.sam -F \
		             	-p "$(echo ${PASSWORD}aa | /usr/lib/makekey)" $MYUSER
	
			HOSTNAME=`hostname | awk -F. '{print $1}'`
	
			echo "$MYUSER new password is \"$PASSWORD\"" \
				| mailx -s "Unix has reset your password on $HOSTNAME $UNIXADMIN@$MYMAILDOMAIN" $MYUSER@$MYMAILDOMAIN
		fi

	elif [[ $(uname) = Linux ]]
	then
		if [[ -f /usr/sbin/chpasswd ]]
		then
			echo "$MYUSER:$PASSWORD" | chpasswd
		else
			echo "$PASSWORD" | passwd --stdin $MYUSER
		fi
		chage -d0
		HOSTNAME=`hostname -s`
		echo "$MYUSER new password is \"$PASSWORD\"" \
			| mailx -s "Unix has reset your password on $HOSTNAME by $UNIXADMIN@$MYMAILDOMAIN." $MYUSER@$MYMAILDOMAIN

	elif [[ $(uname) = SunOS ]]
	then
		echo "==============================================================="
		echo "WARNING:SunOS password change is NOT automated, please do manually."
		echo "==============================================================="
	else
		echo "$MYUSER:$PASSWORD"|chpasswd
		HOSTNAME=`hostname -s`
		echo "$MYUSER new password is \"$PASSWORD\"" \
			| mail -s "Unix has reset your password on $HOSTNAME by $UNIXADMIN@$MYMAILDOMAIN." $MYUSER@$MYMAILDOMAIN
	fi
}

f_unlock()
{
	if (( DEBUG ))
	then
		set -x
	fi

	if [[ $(uname) = Linux ]]
	then
		#echo "ACTION: adding groups to $MYUSER"
		#usermod -a -G usa,staff $MYUSER
		echo "ACTION: forcing password expiration for $MYUSER" | tee -a $LOGFILE
		chage -d0 $MYUSER

		echo "ACTION: resetting user account $MYUSER on `date`" | tee -a $LOGFILE
		passwd -u $MYUSER
		faillog -r $MYUSER

	elif [[ $(uname) = AIX ]]
	then
		#echo "ACTION: adding groups to $MYUSER"
		#chuser groups=usa,staff $MYUSER
		echo "ACTION: forcing password expiration for $MYUSER" | tee -a $LOGFILE
		pwdadm -f ADMCHG $MYUSER

		echo "ACTION: resetting user account $MYUSER on `date`" | tee -a $LOGFILE
		chuser unsuccessful_login_count=0 $MYUSER

	elif [[ $(uname) = HP-UX ]]
	then
		#echo "ACTION: adding groups to $MYUSER"
		#usermod -G usa,staff $MYUSER
		echo "ACTION: resetting user account $MYUSER on `date`" | tee -a $LOGFILE
		passwd -df $MYUSER

	elif [[ $(uname) = SunOS ]]
	then
		#echo "ACTION: adding groups to $MYUSER"
		#usermod -G usa,staff $MYUSER
		echo "ACTION: forcing password expiration for $MYUSER" | tee -a $LOGFILE
		passwd -df $MYUSER
	fi
}

################################################################################
# main
#
echo "INFO: $0 starting."
echo "INFO: $0 starting on `date`" >> $LOGFILE

grep -v ^# $INPUTFILE | grep -v ^$ | while read LINE
do
	if (( $(echo $LINE | awk -F: '{print NF}') != 7 ))
	then
		MYUSER=$LINE
	else
		MYUSER="$(echo $LINE | awk -F: '{print $1}')"
	fi

	if [[ -z $(grep -w $MYUSER /etc/passwd) ]]
	then
		echo "INFO: user $MYUSER doesn't exist, SKIPPING password change" \
					| tee -a $LOGFILE
	else
		echo "ACTION: user exists, CHANGING password for $MYUSER on `date`" \
					| tee -a $LOGFILE
		f_unlock
		f_passmail

	fi
done

echo "INFO: $0 done.  See $LOGFILE for any details"
echo "INFO: $0 done on `date`" >> $LOGFILE
